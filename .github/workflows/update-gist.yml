name: Update VPN Servers Gist

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

jobs:
  update-gist:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Fetch and Save VPN Data
        run: |
          python << 'EOF'
          import requests
          import json
          import csv
          from datetime import datetime, timezone
          from io import StringIO

          # Fetch VPN data
          response = requests.get(
              'http://www.vpngate.net/api/iphone/',
              headers={'User-Agent': 'Mozilla/5.0'},
              timeout=10
          )
          response.raise_for_status()

          # Process CSV data
          lines = response.text.split('\n')
          headers = ['HostName', 'IP', 'Score', 'Ping', 'Speed', 'CountryLong', 'CountryShort', 
                    'NumVpnSessions', 'Uptime', 'TotalUsers', 'TotalTraffic', 'LogType',
                    'Operator', 'Message', 'OpenVPN_ConfigData_Base64']
          
          print(f"Total servers found: {len(lines) - 2}")
          
          # Skip first 2 lines and process all servers
          csv_data = '\n'.join([','.join(headers)] + lines[2:])
          csv_file = StringIO(csv_data)
          reader = csv.DictReader(csv_file)
          
          # Filter and format servers
          servers = []
          for server in reader:
              operator_info = server.get('Operator', '').upper()
              print(f"Processing server: {server['IP']}, Operator: {operator_info}")
              
              # Check for L2TP/IPsec or SSTP in operator info
              if any(proto in operator_info for proto in ['L2TP', 'IPSEC', 'SSTP']):
                  try:
                      protocol = 'L2TP/IPsec' if any(p in operator_info for p in ['L2TP', 'IPSEC']) else 'MS-SSTP'
                      server_data = {
                          'ip': server['IP'],
                          'country': server['CountryLong'],
                          'ping': float(server.get('Ping', 999)),
                          'protocol': protocol,
                          'uptime': int(server['Uptime']),
                          'speed': int(server['Speed']),
                          'score': int(server['Score'])
                      }
                      servers.append(server_data)
                      print(f"Added {protocol} server: {server_data['ip']}")
                  except Exception as e:
                      print(f"Error processing server {server['IP']}: {str(e)}")

          # Sort and save servers
          content = {
              'last_updated': datetime.now(timezone.utc).isoformat(),
              'servers': sorted(servers, key=lambda x: (x['ping'], -x['score']))
          }
          
          with open('vpn_servers.json', 'w') as f:
              json.dump(content, f, indent=2)
          
          print(f'VPN data saved successfully. Found {len(servers)} compatible servers')
          EOF

      - name: Update Gist
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_id: b3049dbc387bf59cbf6810ae0ee90aff
          file_path: vpn_servers.json
          file_type: json

      - name: Verify Gist update
        run: |
          python << 'EOF'
          import requests
          import json
          import sys
          from datetime import datetime, timezone
          
          try:
              # Wait a few seconds for Gist to update
              import time
              time.sleep(5)
              
              # Verify Gist content
              response = requests.get(
                  'https://gist.githubusercontent.com/mortezabahmani/b3049dbc387bf59cbf6810ae0ee90aff/raw/vpn_servers.json',
                  timeout=10
              )
              response.raise_for_status()
              
              data = response.json()
              # Convert naive datetime to UTC
              last_updated = datetime.fromisoformat(data['last_updated']).replace(tzinfo=timezone.utc)
              current_time = datetime.now(timezone.utc)
              age = (current_time - last_updated).total_seconds()
              
              if age > 300:  # More than 5 minutes old
                  raise ValueError(f"Gist not updated (age: {age:.0f} seconds)")
                  
              print("Gist update verified successfully")
              
          except Exception as e:
              print(f"Verification failed: {str(e)}")
              sys.exit(1)
          EOF
